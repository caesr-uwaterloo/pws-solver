#!/usr/bin/python3

"""\
This script parses the gem5 execution log and HIP assembly file to extract the
CFG of a benchmark.

Usage: extract.py -i <input>

Dependencies:
  <input>.s   : Generated by the HIP compiler using the -save-temps flag
  <input>.log : Generated by gem5 using the WavefrontSplit and IPT debug flags

Output: <input>.graph
"""

# TODO:
#   - Allow runs without log file
#   - Use full input file name
#   - Determine instruction encoding length without log file

import argparse
import glob
import re

from graph import *

class Extractor():
    """
    TODO: Implement a more organized version of the script below.
    """

    smem_inst_pattern = r"^s_((buffer_)?(load|store|)_dword(x[0-9]+)?|" \
        r"atc_probe(_buffer)?|dcache_(inv|wb)(_vol)?|mem(real)?time)"
    ds_inst_pattern = r"^ds_.*"
    vmem_inst_pattern = r"^((t?buffer|image|flat)_.*|export)"
    cond_branch_inst_pattern = r"^s_cbranch_.*"
    uncond_branch_inst_pattern = r"^s_branch.*"
    inst_pattern = r"^(s_|v_|ds_|flat_|t?buffer_|image_|export).*"
    bb_label_pattern = r"^(\;\s*%bb\.[0-9]+|BB[0-9]+_[0-9]+)"
    kernel_start_pattern = r"^\;\s*%bb\.0"

    def __init__(self, input_file) -> None:
        self.input = input_file
        pass

    def parse_asm(self) -> None:
        """
        Open the assembly file generated with the -save-temps flag and generate
        a CFG of the basic blocks and edges between them
        """
        prog = []
        with open(self.input) as fi:
            for line in fi:
                line = line.strip()
                if re.search(self.bb_label_pattern, line):
                    if re.search(self.kernel_start_pattern, line):
                        # Start new kernel
                        pass
                    # Add edge to next block
                elif re.search(self.inst_pattern, line):
                    if re.search(self.cond_branch_inst_pattern, line):
                        # Add edge to branch target block
                        pass
                    # Add PC to basic block
                    # Add inst to basic block                


    def parse_log(self) -> None:
        """
        Get execution times from gem5 log file and incorporate them as weights
        into the CFG
        """
        pass

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
            "-i",
            "--input",
            help="Input file name",
            type=str,
            required=True
        )
    args = parser.parse_args()

    e = Extractor(args.input)
    e.parse_asm()