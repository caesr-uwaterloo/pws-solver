#!/usr/bin/python3

"""\
This script parses the gem5 execution log and HIP assembly file to extract the
CFG of a benchmark.

Usage: extract.py -i <input>

Dependencies:
  <input>.s   : Generated by the HIP compiler using the -save-temps flag
  <input>.log : Generated by gem5 using the WavefrontSplit and IPT debug flags

Output: <input>.graph
"""

import argparse
import re

import pattern

class Extractor():
    """
    This class extracts control-flow information from the source assembly file
    and optionally from the gem5 log file to extract the execution times for
    each basic block
    """
    def __init__(self, input_file) -> None:
        self.input = input_file
        self.kernels = []

    def read_basic_block_number(self, line: str) -> int:
        """
        Extract the basic block number from the line that defines the basic
        block label
        """
        assert re.search(pattern.BB_LABEL, line)
        numbers_in_line = [int(x) for x in re.findall(r'\d+', line)]
        if line.startswith(';'):
            return numbers_in_line[0]
        else:
            return numbers_in_line[1]

    def read_branch_target(self, line: str) -> int:
        """
        Extract the basic block number from the branch instruction target
        """
        assert re.search(pattern.COND_BRANCH_INST, line) or \
            re.search(pattern.UNCOND_BRANCH_INST, line)
        numbers_in_line = [int(x) for x in re.findall(r'\d+', line)]
        return numbers_in_line[1]

    def is_double_word_inst(self, line: str) -> bool:
        """
        Determine whether an instruction should be 64 bits
        """
        return re.search(pattern.SMEM_INST, line) or \
            re.search(pattern.DS_INST, line) or \
            re.search(pattern.VMEM_INST, line) or \
            re.search(pattern.DOUBLE_WORD_ALU, line) or \
            re.search(pattern.DOUBLE_WORD_COMPARE, line)

    def parse_asm(self) -> None:
        """
        Open the assembly file generated with the -save-temps flag and generate
        a CFG of the basic blocks and edges between them
        """
        basic_blocks: dict[int, set[int]] = {}
        starting_pc: dict[int, int] = {}
        insts: dict[int, str] = {}
        current_bb_number: int = 0
        pc: int = 0
        with open(self.input, encoding="utf-8") as fi:
            for line in fi:
                line = line.strip()
                if re.search(pattern.BB_LABEL, line):
                    if re.search(pattern.KERNEL_START, line):
                        # Start new kernel
                        basic_blocks[0] = set()
                    else:
                        # Add edge to next block
                        if current_bb_number not in basic_blocks:
                            basic_blocks[current_bb_number] = set()
                        basic_blocks[current_bb_number].add(
                            self.read_basic_block_number(line)
                        )
                    current_bb_number = self.read_basic_block_number(line)
                    starting_pc[current_bb_number] = pc
                elif re.search(pattern.INST, line):
                    if re.search(pattern.COND_BRANCH_INST, line):
                        # Add edge to branch target block
                        if current_bb_number not in basic_blocks:
                            basic_blocks[current_bb_number] = set()
                        basic_blocks[current_bb_number].add(
                            self.read_branch_target(line)
                        )
                    insts[pc] = line
                    if self.is_double_word_inst(line):
                        pc += 8
                    else:
                        pc += 4
                    if re.search(pattern.KERNEL_END, line):
                        self.kernels.append(basic_blocks)
                        basic_blocks = {}

        with open("extractor.txt", 'w+', encoding="utf-8") as fo:
            for pc in sorted(insts):
                fo.write(f"{pc}: {insts[pc]}\n")

    def parse_log(self) -> None:
        """
        Get execution times from gem5 log file and incorporate them as weights
        into the CFG
        """

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
            "-i",
            "--input",
            help="Input file name",
            type=str,
            required=True
        )
    parser.add_argument(
            "-l",
            "--log",
            help="Log file name",
            type=str,
            default=''
        )
    args = parser.parse_args()

    e = Extractor(args.input)
    e.parse_asm()
