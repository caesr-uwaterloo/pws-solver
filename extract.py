#!/usr/bin/python3

"""\
This script parses the gem5 execution log and HIP assembly file to extract the
CFG of a benchmark.

Usage: extract.py -i <asm> [-l <log>]

Dependencies:
  <asm> : Generated by the HIP compiler using the -save-temps flag
  <log> : Generated by gem5 using the IPT debug flag

Outputs:
  <input>-XX.graph
  <input>-XX.png
"""

from pathlib import Path
import argparse
import re

from src import pattern # type: ignore
from src.graph import Graph # type: ignore

class Extractor():
    """
    This class extracts control-flow information from the source assembly file
    and optionally from the gem5 log file to extract the execution times for
    each basic block
    """
    def __init__(self, input_file: str) -> None:
        self.input: str = input_file
        self.graphs: list[Graph] = []

    def read_basic_block_number(self, line: str) -> int:
        """
        Extract the basic block number from the line that defines the basic
        block label
        """
        assert re.search(pattern.BB_LABEL, line)
        numbers_in_line = [int(x) for x in re.findall(r'\d+', line)]
        if line.startswith(';'):
            return numbers_in_line[0]
        return numbers_in_line[1]

    def read_branch_target(self, line: str) -> int:
        """
        Extract the basic block number from the branch instruction target
        """
        assert re.search(pattern.COND_BRANCH_INST, line) or \
            re.search(pattern.UNCOND_BRANCH_INST, line)
        numbers_in_line = [int(x) for x in re.findall(r'\d+', line)]
        if re.search(pattern.COND_BRANCH_SCC_INST, line):
            return numbers_in_line[2]
        return numbers_in_line[1]

    def is_double_word_inst(self, line: str) -> bool:
        """
        Determine whether an instruction should be 64 bits
        """
        return bool(re.search(pattern.SMEM_INST, line) or \
            re.search(pattern.DS_INST, line) or \
            re.search(pattern.VMEM_INST, line) or \
            re.search(pattern.DOUBLE_WORD_ALU, line) or \
            re.search(pattern.DOUBLE_WORD_COMPARE, line))

    def parse_asm(self) -> None:
        """
        Open the assembly file generated with the -save-temps flag and generate
        a CFG of the basic blocks and edges between them
        """
        current_bb_number: int = 0
        pc: int = 0
        g = Graph()
        with open(self.input, encoding="utf-8") as fi:
            for line in fi:
                line = line.strip()
                # TODO: Parse iterations directive comment from disassembly and
                # use it to compute basic block WCET with loops
                if re.search(pattern.BB_LABEL, line):
                    if re.search(pattern.KERNEL_START, line):
                        g.insert_basic_block(0)
                    else:
                        g.insert_edge(
                            src=current_bb_number,
                            dst=self.read_basic_block_number(line)
                        )
                    current_bb_number = self.read_basic_block_number(line)
                elif re.search(pattern.INST, line):
                    if re.search(pattern.COND_BRANCH_INST, line):
                        g.insert_edge(
                            src=current_bb_number,
                            dst=self.read_branch_target(line)
                        )
                    g.insert_instruction(
                        inst=line,
                        pc=pc,
                        bb=current_bb_number
                    )
                    if self.is_double_word_inst(line):
                        pc += 8
                    else:
                        pc += 4
                    if re.search(pattern.KERNEL_END, line):
                        pc = 0
                        self.graphs.append(g)
                        g = Graph()

    def parse_log(self, log_file: str) -> None:
        """
        Get execution times from gem5 log file and incorporate them as weights
        into the CFG
        """
        with open(log_file, encoding="utf-8") as fi:
            for line in fi:
                if re.search(pattern.IPT_EDGE, line):
                    last_four_numbers = re.findall(r'\d+', line)[-4:]
                    kernel_id = int(last_four_numbers[0])
                    start = int(last_four_numbers[1])
                    end = int(last_four_numbers[2])
                    latency = int(last_four_numbers[3])

                    g = self.graphs[kernel_id]
                    if start in g.pc_map and \
                        end in g.pc_map:
                        bb_start = g.pc_basic_block(start)
                        bb_end = g.pc_basic_block(end)
                        # TODO: Add handling logic for other cases:
                        #   - Branches are taken
                        #   - Loops
                        # FIXME: This actually doesn't cover all cases that we
                        # want, need to find a way to capture everything
                        # (inserting raw assembly generates a new basic block
                        # that is undetected by IPTs)
                        if bb_end == bb_start + 1 and \
                            latency > g.cfg[bb_start].wcet:
                            g.cfg[bb_start].wcet = latency

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
            "-i",
            "--input",
            help="Input file name",
            type=str,
            required=True
        )
    parser.add_argument(
            "-l",
            "--log",
            help="Log file name",
            type=str,
            default=''
        )
    args = parser.parse_args()

    e = Extractor(args.input)
    e.parse_asm()
    if len(args.log):
        e.parse_log(args.log)
    path = Path(args.input)
    for i, graph in enumerate(e.graphs):
        file_name = f"{path.parent}/{path.stem}-{i:02}"
        graph.find_branches()
        graph.write_to_file(file_name=f"{file_name}.graph")
        graph.plot(file_name=f"{file_name}.png")
