#!/usr/bin/python3

"""\
This script takes a graph as input and solves for the split points using each
of the available algorithms.

Usage: solver.py -i <graph>

Dependencies:
  <graph> : The .graph file generated by extract.py
"""

import argparse
import timeit

from src.alg.algorithm import Algorithm # type: ignore
# from src.alg.brute_force_algorithm import BruteForceAlgorithm # type: ignore
# from src.alg.dp_algorithm import DPAlgorithm # type: ignore
from src.alg.dws_algorithm import DWSAlgorithm # type: ignore
from src.alg.naive_algorithm import NaiveAlgorithm # type: ignore
from src.alg.no_algorithm import NoSplitAlgorithm # type: ignore
from src.alg.random_algorithm import RandomAlgorithm # type: ignore
from src.graph import Graph # type: ignore

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
            "-i",
            "--input",
            help="Input file name",
            type=str,
            required=True
        )
    args = parser.parse_args()

    g = Graph()
    g.read_from_file(args.input)
    g.find_branches()
    algs = [
        NaiveAlgorithm(g, 3),
        NoSplitAlgorithm(g, 3),
        RandomAlgorithm(g, 3),
        DWSAlgorithm(g, 3),
        # DPAlgorithm(g, 3),
        # BruteForceAlgorithm(g, 3)
    ]

    print(f"{f'Algorithm':<25} {f'Analytical WCET':<25} {'Algorithm Runtime (s)'}")
    wcets = []
    runtimes = []
    a: Algorithm
    for a in algs:
        start = timeit.default_timer()
        sp = a.solve()
        end = timeit.default_timer()
        wcet = a.wcet(splits=sp)
        wcets.append(str(wcet))
        runtimes.append(str(end-start))
        print(f"{a.name():<25} {wcet:<25} {end-start:0.9f}")
    # print(f"{args.input},{','.join(wcets)},{','.join(runtimes)}")
