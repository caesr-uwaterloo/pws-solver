#!/usr/bin/python3

"""\
This script takes a graph as input and solves for the split points using each
of the available algorithms.

Usage: solver.py -i <graph>

Dependencies:
  <graph> : The CSV file generated by extract.py
"""

import argparse
import timeit

from src.alg.algorithm import Algorithm
from src.alg.brute_force_algorithm import BruteForceAlgorithm
from src.alg.dp_algorithm import DPAlgorithm
from src.alg.dws_algorithm import DWSAlgorithm
from src.alg.ilp_algorithm import ILPAlgorithm
from src.alg.naive_algorithm import NaiveAlgorithm
from src.alg.no_algorithm import NoSplitAlgorithm
from src.alg.random_algorithm import RandomAlgorithm
from src.graph import Graph

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
            "-i",
            "--input",
            help="Input file name",
            type=str,
            required=True
        )
    parser.add_argument(
            "-s",
            "--simds",
            help="Number of SIMDs for CFG",
            type=int,
            default=3
        )
    args = parser.parse_args()

    g = Graph()
    g.read_from_csv(args.input)
    g.find_branches()
    s = args.simds
    algs = [
        NoSplitAlgorithm(g, s),
        DWSAlgorithm(g, s),
        RandomAlgorithm(g, s),
        NaiveAlgorithm(g, s),
        DPAlgorithm(g, s),
        BruteForceAlgorithm(g, s),
        ILPAlgorithm(g, s)
    ]

    print(f"{f'Algorithm':<25} {f'Split Choices':<25} {f'Analytical WCET':<25} {'Algorithm Runtime (s)':<25}")
    wcets = []
    runtimes = []
    a: Algorithm
    for a in algs:
        start = timeit.default_timer()
        sp = a.solve()
        end = timeit.default_timer()
        wcet = a.wcet(splits=sp)
        choice = ','.join([str(i) for i in sp])
        wcets.append(str(wcet))
        runtimes.append(str(end-start))
        print(f"{a.name():<25} {choice:<25} {wcet:<25} {end-start:0.9f}")
